// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function padNumber(numString) {
  if (Caml_format.caml_int_of_string(numString) < 10) {
    return "0" + numString;
  } else {
    return numString;
  }
}

function formatTime(seconds) {
  var mins = seconds / 60 | 0;
  var minsString = padNumber(String(mins));
  var seconds$1 = seconds % 60;
  var secondsString = padNumber(String(seconds$1));
  return minsString + (":" + secondsString);
}

function TimerHooks$Button(Props) {
  var label = Props.label;
  var onClick = Props.onClick;
  return React.createElement("button", {
              onClick: onClick
            }, label);
}

var Button = {
  make: TimerHooks$Button
};

var updateTitle = (function updateTitle(remaining) {
    document.title = "⏰ " + remaining + " ⏰";
  });

var initialState = {
  seconds: 30,
  isTicking: false
};

function TimerHooks(Props) {
  var match = React.useState((function () {
          return initialState;
        }));
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          var timerId = setInterval((function (param) {
                  var newState = state.isTicking && state.seconds > 0 ? (Curry._1(updateTitle, formatTime(state.seconds - 1 | 0)), {
                        seconds: state.seconds - 1 | 0,
                        isTicking: state.isTicking
                      }) : state;
                  return Curry._1(dispatch, (function (param) {
                                return newState;
                              }));
                }), 1000);
          return (function (param) {
                    clearInterval(timerId);
                    return /* () */0;
                  });
        }));
  return React.createElement("div", {
              style: {
                border: "1px solid black",
                maxWidth: "180px",
                textAlign: "center",
                borderRadius: "8px"
              }
            }, React.createElement("p", {
                  style: {
                    color: "#444444",
                    fontSize: "42px",
                    margin: "16px 0"
                  }
                }, formatTime(state.seconds)), state.isTicking ? React.createElement(TimerHooks$Button, {
                    label: "STOP",
                    onClick: (function (_event) {
                        return Curry._1(dispatch, (function (param) {
                                      return {
                                              seconds: state.seconds,
                                              isTicking: false
                                            };
                                    }));
                      })
                  }) : React.createElement(React.Fragment, undefined, React.createElement(TimerHooks$Button, {
                        label: "START",
                        onClick: (function (_event) {
                            return Curry._1(dispatch, (function (param) {
                                          return {
                                                  seconds: state.seconds,
                                                  isTicking: true
                                                };
                                        }));
                          })
                      }), React.createElement(TimerHooks$Button, {
                        label: "RESET",
                        onClick: (function (_event) {
                            return Curry._1(dispatch, (function (param) {
                                          return {
                                                  seconds: 30,
                                                  isTicking: state.isTicking
                                                };
                                        }));
                          })
                      })));
}

var make = TimerHooks;

exports.padNumber = padNumber;
exports.formatTime = formatTime;
exports.Button = Button;
exports.updateTitle = updateTitle;
exports.initialState = initialState;
exports.make = make;
/* updateTitle Not a pure module */
